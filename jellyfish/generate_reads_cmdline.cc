/*
  File autogenerated by gengetopt version 2.22.4
  generated with the following command:
  gengetopt --show-required --default-option -c cc -H hpp -F generate_reads_cmdline -f generate_reads_cmdline -a generate_reads_args --unamed-opts=seed length

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "generate_reads_cmdline.hpp"

const char *generate_reads_args_purpose = "Generate random reads";

const char *generate_reads_args_usage = "Usage: generate_reads [OPTIONS]... [seed]...";

const char *generate_reads_args_description = "";

const char *generate_reads_args_help[] = {
  "  -h, --help                Print help and exit",
  "  -V, --version             Print version and exit",
  "  -s, --seed=LONG           Seed (mandatory)",
  "  -o, --output=STRING       Output  (default=`/dev/fd/1')",
  "  -q, --fastq               Generate fastq file  (default=off)",
  "  -r, --read-length=INT     Read length (default=size of sequence) (mandatory)",
  "  -g, --genome-length=LONG  Length of genome (mandatory)",
  "  -S, --sequence=STRING     File to write the genome sequence",
  "  -e, --error-rate=DOUBLE   Number of error per bases (mandatory)",
  "  -c, --coverage=DOUBLE     Genome read coverage (mandatory)",
  "  -v, --verbose             Be verbose  (default=off)",
    0
};

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
  , ARG_LONG
  , ARG_DOUBLE
} generate_reads_cmdline_arg_type;

static
void clear_given (struct generate_reads_args *args_info);
static
void clear_args (struct generate_reads_args *args_info);

static int
generate_reads_cmdline_internal (int argc, char **argv, struct generate_reads_args *args_info,
                        struct generate_reads_cmdline_params *params, const char *additional_error);

static int
generate_reads_cmdline_required2 (struct generate_reads_args *args_info, const char *prog_name, const char *additional_error);

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct generate_reads_args *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->seed_given = 0 ;
  args_info->output_given = 0 ;
  args_info->fastq_given = 0 ;
  args_info->read_length_given = 0 ;
  args_info->genome_length_given = 0 ;
  args_info->sequence_given = 0 ;
  args_info->error_rate_given = 0 ;
  args_info->coverage_given = 0 ;
  args_info->verbose_given = 0 ;
}

static
void clear_args (struct generate_reads_args *args_info)
{
  FIX_UNUSED (args_info);
  args_info->seed_orig = NULL;
  args_info->output_arg = gengetopt_strdup ("/dev/fd/1");
  args_info->output_orig = NULL;
  args_info->fastq_flag = 0;
  args_info->read_length_orig = NULL;
  args_info->genome_length_orig = NULL;
  args_info->sequence_arg = NULL;
  args_info->sequence_orig = NULL;
  args_info->error_rate_orig = NULL;
  args_info->coverage_orig = NULL;
  args_info->verbose_flag = 0;
  
}

static
void init_args_info(struct generate_reads_args *args_info)
{


  args_info->help_help = generate_reads_args_help[0] ;
  args_info->version_help = generate_reads_args_help[1] ;
  args_info->seed_help = generate_reads_args_help[2] ;
  args_info->output_help = generate_reads_args_help[3] ;
  args_info->fastq_help = generate_reads_args_help[4] ;
  args_info->read_length_help = generate_reads_args_help[5] ;
  args_info->genome_length_help = generate_reads_args_help[6] ;
  args_info->sequence_help = generate_reads_args_help[7] ;
  args_info->error_rate_help = generate_reads_args_help[8] ;
  args_info->coverage_help = generate_reads_args_help[9] ;
  args_info->verbose_help = generate_reads_args_help[10] ;
  
}

void
generate_reads_cmdline_print_version (void)
{
  printf ("%s %s\n",
     (strlen(GENERATE_READS_CMDLINE_PACKAGE_NAME) ? GENERATE_READS_CMDLINE_PACKAGE_NAME : GENERATE_READS_CMDLINE_PACKAGE),
     GENERATE_READS_CMDLINE_VERSION);
}

static void print_help_common(void) {
  generate_reads_cmdline_print_version ();

  if (strlen(generate_reads_args_purpose) > 0)
    printf("\n%s\n", generate_reads_args_purpose);

  if (strlen(generate_reads_args_usage) > 0)
    printf("\n%s\n", generate_reads_args_usage);

  printf("\n");

  if (strlen(generate_reads_args_description) > 0)
    printf("%s\n\n", generate_reads_args_description);
}

void
generate_reads_cmdline_print_help (void)
{
  int i = 0;
  print_help_common();
  while (generate_reads_args_help[i])
    printf("%s\n", generate_reads_args_help[i++]);
}

void
generate_reads_cmdline_init (struct generate_reads_args *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
generate_reads_cmdline_params_init(struct generate_reads_cmdline_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct generate_reads_cmdline_params *
generate_reads_cmdline_params_create(void)
{
  struct generate_reads_cmdline_params *params = 
    (struct generate_reads_cmdline_params *)malloc(sizeof(struct generate_reads_cmdline_params));
  generate_reads_cmdline_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}


static void
generate_reads_cmdline_release (struct generate_reads_args *args_info)
{
  unsigned int i;
  free_string_field (&(args_info->seed_orig));
  free_string_field (&(args_info->output_arg));
  free_string_field (&(args_info->output_orig));
  free_string_field (&(args_info->read_length_orig));
  free_string_field (&(args_info->genome_length_orig));
  free_string_field (&(args_info->sequence_arg));
  free_string_field (&(args_info->sequence_orig));
  free_string_field (&(args_info->error_rate_orig));
  free_string_field (&(args_info->coverage_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}


int
generate_reads_cmdline_dump(FILE *outfile, struct generate_reads_args *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", GENERATE_READS_CMDLINE_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  if (args_info->seed_given)
    write_into_file(outfile, "seed", args_info->seed_orig, 0);
  if (args_info->output_given)
    write_into_file(outfile, "output", args_info->output_orig, 0);
  if (args_info->fastq_given)
    write_into_file(outfile, "fastq", 0, 0 );
  if (args_info->read_length_given)
    write_into_file(outfile, "read-length", args_info->read_length_orig, 0);
  if (args_info->genome_length_given)
    write_into_file(outfile, "genome-length", args_info->genome_length_orig, 0);
  if (args_info->sequence_given)
    write_into_file(outfile, "sequence", args_info->sequence_orig, 0);
  if (args_info->error_rate_given)
    write_into_file(outfile, "error-rate", args_info->error_rate_orig, 0);
  if (args_info->coverage_given)
    write_into_file(outfile, "coverage", args_info->coverage_orig, 0);
  if (args_info->verbose_given)
    write_into_file(outfile, "verbose", 0, 0 );
  

  i = EXIT_SUCCESS;
  return i;
}

int
generate_reads_cmdline_file_save(const char *filename, struct generate_reads_args *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", GENERATE_READS_CMDLINE_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = generate_reads_cmdline_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
generate_reads_cmdline_free (struct generate_reads_args *args_info)
{
  generate_reads_cmdline_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

int
generate_reads_cmdline (int argc, char **argv, struct generate_reads_args *args_info)
{
  return generate_reads_cmdline2 (argc, argv, args_info, 0, 1, 1);
}

int
generate_reads_cmdline_ext (int argc, char **argv, struct generate_reads_args *args_info,
                   struct generate_reads_cmdline_params *params)
{
  int result;
  result = generate_reads_cmdline_internal (argc, argv, args_info, params, 0);

  if (result == EXIT_FAILURE)
    {
      generate_reads_cmdline_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
generate_reads_cmdline2 (int argc, char **argv, struct generate_reads_args *args_info, int override, int initialize, int check_required)
{
  int result;
  struct generate_reads_cmdline_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = generate_reads_cmdline_internal (argc, argv, args_info, &params, 0);

  if (result == EXIT_FAILURE)
    {
      generate_reads_cmdline_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
generate_reads_cmdline_required (struct generate_reads_args *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (generate_reads_cmdline_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      generate_reads_cmdline_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
generate_reads_cmdline_required2 (struct generate_reads_args *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (! args_info->seed_given)
    {
      fprintf (stderr, "%s: '--seed' ('-s') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (! args_info->read_length_given)
    {
      fprintf (stderr, "%s: '--read-length' ('-r') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (! args_info->genome_length_given)
    {
      fprintf (stderr, "%s: '--genome-length' ('-g') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (! args_info->error_rate_given)
    {
      fprintf (stderr, "%s: '--error-rate' ('-e') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  if (! args_info->coverage_given)
    {
      fprintf (stderr, "%s: '--coverage' ('-c') option required%s\n", prog_name, (additional_error ? additional_error : ""));
      error = 1;
    }
  
  
  /* checks for dependences among options */

  return error;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see generate_reads_cmdline_params.check_ambiguity
 * @param override @see generate_reads_cmdline_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               generate_reads_cmdline_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_LONG:
    if (val) *((long *)field) = (long)strtol (val, &stop_char, 0);
    break;
  case ARG_DOUBLE:
    if (val) *((double *)field) = strtod (val, &stop_char);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_LONG:
  case ARG_DOUBLE:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}


int
generate_reads_cmdline_internal (
  int argc, char **argv, struct generate_reads_args *args_info,
                        struct generate_reads_cmdline_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  int error = 0;
  struct generate_reads_args local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    generate_reads_cmdline_init (args_info);

  generate_reads_cmdline_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "seed",	1, NULL, 's' },
        { "output",	1, NULL, 'o' },
        { "fastq",	0, NULL, 'q' },
        { "read-length",	1, NULL, 'r' },
        { "genome-length",	1, NULL, 'g' },
        { "sequence",	1, NULL, 'S' },
        { "error-rate",	1, NULL, 'e' },
        { "coverage",	1, NULL, 'c' },
        { "verbose",	0, NULL, 'v' },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hVs:o:qr:g:S:e:c:v", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          generate_reads_cmdline_print_help ();
          generate_reads_cmdline_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          generate_reads_cmdline_print_version ();
          generate_reads_cmdline_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 's':	/* Seed.  */
        
        
          if (update_arg( (void *)&(args_info->seed_arg), 
               &(args_info->seed_orig), &(args_info->seed_given),
              &(local_args_info.seed_given), optarg, 0, 0, ARG_LONG,
              check_ambiguity, override, 0, 0,
              "seed", 's',
              additional_error))
            goto failure;
        
          break;
        case 'o':	/* Output.  */
        
        
          if (update_arg( (void *)&(args_info->output_arg), 
               &(args_info->output_orig), &(args_info->output_given),
              &(local_args_info.output_given), optarg, 0, "/dev/fd/1", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "output", 'o',
              additional_error))
            goto failure;
        
          break;
        case 'q':	/* Generate fastq file.  */
        
        
          if (update_arg((void *)&(args_info->fastq_flag), 0, &(args_info->fastq_given),
              &(local_args_info.fastq_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "fastq", 'q',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* Read length (default=size of sequence).  */
        
        
          if (update_arg( (void *)&(args_info->read_length_arg), 
               &(args_info->read_length_orig), &(args_info->read_length_given),
              &(local_args_info.read_length_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "read-length", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'g':	/* Length of genome.  */
        
        
          if (update_arg( (void *)&(args_info->genome_length_arg), 
               &(args_info->genome_length_orig), &(args_info->genome_length_given),
              &(local_args_info.genome_length_given), optarg, 0, 0, ARG_LONG,
              check_ambiguity, override, 0, 0,
              "genome-length", 'g',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* File to write the genome sequence.  */
        
        
          if (update_arg( (void *)&(args_info->sequence_arg), 
               &(args_info->sequence_orig), &(args_info->sequence_given),
              &(local_args_info.sequence_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "sequence", 'S',
              additional_error))
            goto failure;
        
          break;
        case 'e':	/* Number of error per bases.  */
        
        
          if (update_arg( (void *)&(args_info->error_rate_arg), 
               &(args_info->error_rate_orig), &(args_info->error_rate_given),
              &(local_args_info.error_rate_given), optarg, 0, 0, ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "error-rate", 'e',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* Genome read coverage.  */
        
        
          if (update_arg( (void *)&(args_info->coverage_arg), 
               &(args_info->coverage_orig), &(args_info->coverage_given),
              &(local_args_info.coverage_given), optarg, 0, 0, ARG_DOUBLE,
              check_ambiguity, override, 0, 0,
              "coverage", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'v':	/* Be verbose.  */
        
        
          if (update_arg((void *)&(args_info->verbose_flag), 0, &(args_info->verbose_given),
              &(local_args_info.verbose_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "verbose", 'v',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", GENERATE_READS_CMDLINE_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */



  if (check_required)
    {
      error += generate_reads_cmdline_required2 (args_info, argv[0], additional_error);
    }

  generate_reads_cmdline_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  
  generate_reads_cmdline_release (&local_args_info);
  return (EXIT_FAILURE);
}
