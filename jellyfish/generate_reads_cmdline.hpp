/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __GENERATE_READS_ARGS_HPP__
#define __GENERATE_READS_ARGS_HPP__

#include <yaggo.hpp>

class generate_reads_args {
public:
  uint64_t                       seed_arg;
  bool                           seed_given;
  const char *                   output_arg;
  bool                           output_given;
  bool                           fastq_flag;
  uint32_t                       read_length_arg;
  bool                           read_length_given;
  uint64_t                       genome_length_arg;
  bool                           genome_length_given;
  yaggo::string                  sequence_arg;
  bool                           sequence_given;
  double                         error_rate_arg;
  bool                           error_rate_given;
  double                         coverage_arg;
  bool                           coverage_given;
  bool                           verbose_flag;

  enum {
    USAGE_OPT = 1000
  };

  generate_reads_args(int argc, char *argv[]) :
    seed_arg(0), seed_given(false),
    output_arg("/dev/fd/1"), output_given(false),
    fastq_flag(false),
    read_length_arg(0), read_length_given(false),
    genome_length_arg(0), genome_length_given(false),
    sequence_arg(""), sequence_given(false),
    error_rate_arg(0.0), error_rate_given(false),
    coverage_arg(0.0), coverage_given(false),
    verbose_flag(false)
  {
    static struct option long_options[] = {
      {"seed", 1, 0, 's'},
      {"output", 1, 0, 'o'},
      {"fastq", 0, 0, 'q'},
      {"read-length", 1, 0, 'r'},
      {"genome-length", 1, 0, 'g'},
      {"sequence", 1, 0, 'S'},
      {"error-rate", 1, 0, 'e'},
      {"coverage", 1, 0, 'c'},
      {"verbose", 0, 0, 'v'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVs:o:qr:g:S:e:c:v";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 's':
        seed_given = true;
        seed_arg = yaggo::conv_uint<uint64_t>((const char *)optarg, err, false);
        CHECK_ERR(uint64_t, optarg, "-s, --seed=uint64")
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      case 'q':
        fastq_flag = true;
        break;
      case 'r':
        read_length_given = true;
        read_length_arg = yaggo::conv_uint<uint32_t>((const char *)optarg, err, false);
        CHECK_ERR(uint32_t, optarg, "-r, --read-length=uint32")
        break;
      case 'g':
        genome_length_given = true;
        genome_length_arg = yaggo::conv_uint<uint64_t>((const char *)optarg, err, false);
        CHECK_ERR(uint64_t, optarg, "-g, --genome-length=uint64")
        break;
      case 'S':
        sequence_given = true;
        sequence_arg.assign(optarg);
        break;
      case 'e':
        error_rate_given = true;
        error_rate_arg = yaggo::conv_double((const char *)optarg, err, false);
        CHECK_ERR(double_t, optarg, "-e, --error-rate=double")
        break;
      case 'c':
        coverage_given = true;
        coverage_arg = yaggo::conv_double((const char *)optarg, err, false);
        CHECK_ERR(double_t, optarg, "-c, --coverage=double")
        break;
      case 'v':
        verbose_flag = true;
        break;
      }
    }
    if(!seed_given)
      error("[-s, --seed=uint64] required switch");
    if(!read_length_given)
      error("[-r, --read-length=uint32] required switch");
    if(!genome_length_given)
      error("[-g, --genome-length=uint64] required switch");
    if(!error_rate_given)
      error("[-e, --error-rate=double] required switch");
    if(!coverage_given)
      error("[-c, --coverage=double] required switch");
    if(argc - optind != 0)
      error("Requires exactly 0 argument.");
  }
#define generate_reads_args_USAGE "Usage: generate_reads [options]"
  const char * usage() const { return generate_reads_args_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }
#define generate_reads_args_HELP "Generate random reads\n\n" \
  "Options (default value in (), *required):\n" \
  " -s, --seed=uint64                       *Seed\n" \
  " -o, --output=c_string                    Output (/dev/fd/1)\n" \
  " -q, --fastq                              Generate fastq file (false)\n" \
  " -r, --read-length=uint32                *Read length (default=size of sequence)\n" \
  " -g, --genome-length=uint64              *Length of genome\n" \
  " -S, --sequence=string                    File to write the genome sequence\n" \
  " -e, --error-rate=double                 *Number of error per bases\n" \
  " -c, --coverage=double                   *Genome read coverage\n" \
  " -v, --verbose                            Be verbose (false)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return generate_reads_args_HELP; }
#define generate_reads_args_HIDDEN "Hidden options:"

  const char * hidden() const { return generate_reads_args_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "seed_given:" << seed_given << " seed_arg:" << seed_arg << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "fastq_flag:" << fastq_flag << "\n";
    os << "read_length_given:" << read_length_given << " read_length_arg:" << read_length_arg << "\n";
    os << "genome_length_given:" << genome_length_given << " genome_length_arg:" << genome_length_arg << "\n";
    os << "sequence_given:" << sequence_given << " sequence_arg:" << sequence_arg << "\n";
    os << "error_rate_given:" << error_rate_given << " error_rate_arg:" << error_rate_arg << "\n";
    os << "coverage_given:" << coverage_given << " coverage_arg:" << coverage_arg << "\n";
    os << "verbose_flag:" << verbose_flag << "\n";
  }
private:
};

#endif // __GENERATE_READS_ARGS_HPP__"
