/** @file generate_reads_cmdline.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GENERATE_READS_CMDLINE_H
#define GENERATE_READS_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef GENERATE_READS_CMDLINE_PACKAGE
/** @brief the program name (used for printing errors) */
#define GENERATE_READS_CMDLINE_PACKAGE "generate_reads"
#endif

#ifndef GENERATE_READS_CMDLINE_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define GENERATE_READS_CMDLINE_PACKAGE_NAME "generate_reads"
#endif

#ifndef GENERATE_READS_CMDLINE_VERSION
/** @brief the program version */
#define GENERATE_READS_CMDLINE_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct generate_reads_args
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  long seed_arg;	/**< @brief Seed.  */
  char * seed_orig;	/**< @brief Seed original value given at command line.  */
  const char *seed_help; /**< @brief Seed help description.  */
  char * output_arg;	/**< @brief Output (default='/dev/fd/1').  */
  char * output_orig;	/**< @brief Output original value given at command line.  */
  const char *output_help; /**< @brief Output help description.  */
  int fastq_flag;	/**< @brief Generate fastq file (default=off).  */
  const char *fastq_help; /**< @brief Generate fastq file help description.  */
  int read_length_arg;	/**< @brief Read length (default=size of sequence).  */
  char * read_length_orig;	/**< @brief Read length (default=size of sequence) original value given at command line.  */
  const char *read_length_help; /**< @brief Read length (default=size of sequence) help description.  */
  long genome_length_arg;	/**< @brief Length of genome.  */
  char * genome_length_orig;	/**< @brief Length of genome original value given at command line.  */
  const char *genome_length_help; /**< @brief Length of genome help description.  */
  char * sequence_arg;	/**< @brief File to write the genome sequence.  */
  char * sequence_orig;	/**< @brief File to write the genome sequence original value given at command line.  */
  const char *sequence_help; /**< @brief File to write the genome sequence help description.  */
  double error_rate_arg;	/**< @brief Number of error per bases.  */
  char * error_rate_orig;	/**< @brief Number of error per bases original value given at command line.  */
  const char *error_rate_help; /**< @brief Number of error per bases help description.  */
  double coverage_arg;	/**< @brief Genome read coverage.  */
  char * coverage_orig;	/**< @brief Genome read coverage original value given at command line.  */
  const char *coverage_help; /**< @brief Genome read coverage help description.  */
  int verbose_flag;	/**< @brief Be verbose (default=off).  */
  const char *verbose_help; /**< @brief Be verbose help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int fastq_given ;	/**< @brief Whether fastq was given.  */
  unsigned int read_length_given ;	/**< @brief Whether read-length was given.  */
  unsigned int genome_length_given ;	/**< @brief Whether genome-length was given.  */
  unsigned int sequence_given ;	/**< @brief Whether sequence was given.  */
  unsigned int error_rate_given ;	/**< @brief Whether error-rate was given.  */
  unsigned int coverage_given ;	/**< @brief Whether coverage was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct generate_reads_cmdline_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure generate_reads_args (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure generate_reads_args (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *generate_reads_args_purpose;
/** @brief the usage string of the program */
extern const char *generate_reads_args_usage;
/** @brief all the lines making the help output */
extern const char *generate_reads_args_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generate_reads_cmdline (int argc, char **argv,
  struct generate_reads_args *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use generate_reads_cmdline_ext() instead
 */
int generate_reads_cmdline2 (int argc, char **argv,
  struct generate_reads_args *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generate_reads_cmdline_ext (int argc, char **argv,
  struct generate_reads_args *args_info,
  struct generate_reads_cmdline_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generate_reads_cmdline_dump(FILE *outfile,
  struct generate_reads_args *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generate_reads_cmdline_file_save(const char *filename,
  struct generate_reads_args *args_info);

/**
 * Print the help
 */
void generate_reads_cmdline_print_help(void);
/**
 * Print the version
 */
void generate_reads_cmdline_print_version(void);

/**
 * Initializes all the fields a generate_reads_cmdline_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void generate_reads_cmdline_params_init(struct generate_reads_cmdline_params *params);

/**
 * Allocates dynamically a generate_reads_cmdline_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized generate_reads_cmdline_params structure
 */
struct generate_reads_cmdline_params *generate_reads_cmdline_params_create(void);

/**
 * Initializes the passed generate_reads_args structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void generate_reads_cmdline_init (struct generate_reads_args *args_info);
/**
 * Deallocates the string fields of the generate_reads_args structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void generate_reads_cmdline_free (struct generate_reads_args *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int generate_reads_cmdline_required (struct generate_reads_args *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GENERATE_READS_CMDLINE_H */
